// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package trapcheck

import (
	"github.com/circonus-labs/go-apiclient"
	"sync"
)

// Ensure, that APIMock does implement API.
// If this is not the case, regenerate this file with moq.
var _ API = &APIMock{}

// APIMock is a mock implementation of API.
//
// 	func TestSomethingThatUsesAPI(t *testing.T) {
//
// 		// make and configure a mocked API
// 		mockedAPI := &APIMock{
// 			CreateCheckBundleFunc: func(cfg *apiclient.CheckBundle) (*apiclient.CheckBundle, error) {
// 				panic("mock out the CreateCheckBundle method")
// 			},
// 			FetchBrokerFunc: func(cid apiclient.CIDType) (*apiclient.Broker, error) {
// 				panic("mock out the FetchBroker method")
// 			},
// 			FetchBrokersFunc: func() (*[]apiclient.Broker, error) {
// 				panic("mock out the FetchBrokers method")
// 			},
// 			FetchCheckBundleFunc: func(cid apiclient.CIDType) (*apiclient.CheckBundle, error) {
// 				panic("mock out the FetchCheckBundle method")
// 			},
// 			GetFunc: func(requrl string) ([]byte, error) {
// 				panic("mock out the Get method")
// 			},
// 			SearchBrokersFunc: func(searchCriteria *apiclient.SearchQueryType, filterCriteria *apiclient.SearchFilterType) (*[]apiclient.Broker, error) {
// 				panic("mock out the SearchBrokers method")
// 			},
// 			SearchCheckBundlesFunc: func(searchCriteria *apiclient.SearchQueryType, filterCriteria *apiclient.SearchFilterType) (*[]apiclient.CheckBundle, error) {
// 				panic("mock out the SearchCheckBundles method")
// 			},
// 		}
//
// 		// use mockedAPI in code that requires API
// 		// and then make assertions.
//
// 	}
type APIMock struct {
	// CreateCheckBundleFunc mocks the CreateCheckBundle method.
	CreateCheckBundleFunc func(cfg *apiclient.CheckBundle) (*apiclient.CheckBundle, error)

	// FetchBrokerFunc mocks the FetchBroker method.
	FetchBrokerFunc func(cid apiclient.CIDType) (*apiclient.Broker, error)

	// FetchBrokersFunc mocks the FetchBrokers method.
	FetchBrokersFunc func() (*[]apiclient.Broker, error)

	// FetchCheckBundleFunc mocks the FetchCheckBundle method.
	FetchCheckBundleFunc func(cid apiclient.CIDType) (*apiclient.CheckBundle, error)

	// GetFunc mocks the Get method.
	GetFunc func(requrl string) ([]byte, error)

	// SearchBrokersFunc mocks the SearchBrokers method.
	SearchBrokersFunc func(searchCriteria *apiclient.SearchQueryType, filterCriteria *apiclient.SearchFilterType) (*[]apiclient.Broker, error)

	// SearchCheckBundlesFunc mocks the SearchCheckBundles method.
	SearchCheckBundlesFunc func(searchCriteria *apiclient.SearchQueryType, filterCriteria *apiclient.SearchFilterType) (*[]apiclient.CheckBundle, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateCheckBundle holds details about calls to the CreateCheckBundle method.
		CreateCheckBundle []struct {
			// Cfg is the cfg argument value.
			Cfg *apiclient.CheckBundle
		}
		// FetchBroker holds details about calls to the FetchBroker method.
		FetchBroker []struct {
			// Cid is the cid argument value.
			Cid apiclient.CIDType
		}
		// FetchBrokers holds details about calls to the FetchBrokers method.
		FetchBrokers []struct {
		}
		// FetchCheckBundle holds details about calls to the FetchCheckBundle method.
		FetchCheckBundle []struct {
			// Cid is the cid argument value.
			Cid apiclient.CIDType
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Requrl is the requrl argument value.
			Requrl string
		}
		// SearchBrokers holds details about calls to the SearchBrokers method.
		SearchBrokers []struct {
			// SearchCriteria is the searchCriteria argument value.
			SearchCriteria *apiclient.SearchQueryType
			// FilterCriteria is the filterCriteria argument value.
			FilterCriteria *apiclient.SearchFilterType
		}
		// SearchCheckBundles holds details about calls to the SearchCheckBundles method.
		SearchCheckBundles []struct {
			// SearchCriteria is the searchCriteria argument value.
			SearchCriteria *apiclient.SearchQueryType
			// FilterCriteria is the filterCriteria argument value.
			FilterCriteria *apiclient.SearchFilterType
		}
	}
	lockCreateCheckBundle  sync.RWMutex
	lockFetchBroker        sync.RWMutex
	lockFetchBrokers       sync.RWMutex
	lockFetchCheckBundle   sync.RWMutex
	lockGet                sync.RWMutex
	lockSearchBrokers      sync.RWMutex
	lockSearchCheckBundles sync.RWMutex
}

// CreateCheckBundle calls CreateCheckBundleFunc.
func (mock *APIMock) CreateCheckBundle(cfg *apiclient.CheckBundle) (*apiclient.CheckBundle, error) {
	if mock.CreateCheckBundleFunc == nil {
		panic("APIMock.CreateCheckBundleFunc: method is nil but API.CreateCheckBundle was just called")
	}
	callInfo := struct {
		Cfg *apiclient.CheckBundle
	}{
		Cfg: cfg,
	}
	mock.lockCreateCheckBundle.Lock()
	mock.calls.CreateCheckBundle = append(mock.calls.CreateCheckBundle, callInfo)
	mock.lockCreateCheckBundle.Unlock()
	return mock.CreateCheckBundleFunc(cfg)
}

// CreateCheckBundleCalls gets all the calls that were made to CreateCheckBundle.
// Check the length with:
//     len(mockedAPI.CreateCheckBundleCalls())
func (mock *APIMock) CreateCheckBundleCalls() []struct {
	Cfg *apiclient.CheckBundle
} {
	var calls []struct {
		Cfg *apiclient.CheckBundle
	}
	mock.lockCreateCheckBundle.RLock()
	calls = mock.calls.CreateCheckBundle
	mock.lockCreateCheckBundle.RUnlock()
	return calls
}

// FetchBroker calls FetchBrokerFunc.
func (mock *APIMock) FetchBroker(cid apiclient.CIDType) (*apiclient.Broker, error) {
	if mock.FetchBrokerFunc == nil {
		panic("APIMock.FetchBrokerFunc: method is nil but API.FetchBroker was just called")
	}
	callInfo := struct {
		Cid apiclient.CIDType
	}{
		Cid: cid,
	}
	mock.lockFetchBroker.Lock()
	mock.calls.FetchBroker = append(mock.calls.FetchBroker, callInfo)
	mock.lockFetchBroker.Unlock()
	return mock.FetchBrokerFunc(cid)
}

// FetchBrokerCalls gets all the calls that were made to FetchBroker.
// Check the length with:
//     len(mockedAPI.FetchBrokerCalls())
func (mock *APIMock) FetchBrokerCalls() []struct {
	Cid apiclient.CIDType
} {
	var calls []struct {
		Cid apiclient.CIDType
	}
	mock.lockFetchBroker.RLock()
	calls = mock.calls.FetchBroker
	mock.lockFetchBroker.RUnlock()
	return calls
}

// FetchBrokers calls FetchBrokersFunc.
func (mock *APIMock) FetchBrokers() (*[]apiclient.Broker, error) {
	if mock.FetchBrokersFunc == nil {
		panic("APIMock.FetchBrokersFunc: method is nil but API.FetchBrokers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockFetchBrokers.Lock()
	mock.calls.FetchBrokers = append(mock.calls.FetchBrokers, callInfo)
	mock.lockFetchBrokers.Unlock()
	return mock.FetchBrokersFunc()
}

// FetchBrokersCalls gets all the calls that were made to FetchBrokers.
// Check the length with:
//     len(mockedAPI.FetchBrokersCalls())
func (mock *APIMock) FetchBrokersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockFetchBrokers.RLock()
	calls = mock.calls.FetchBrokers
	mock.lockFetchBrokers.RUnlock()
	return calls
}

// FetchCheckBundle calls FetchCheckBundleFunc.
func (mock *APIMock) FetchCheckBundle(cid apiclient.CIDType) (*apiclient.CheckBundle, error) {
	if mock.FetchCheckBundleFunc == nil {
		panic("APIMock.FetchCheckBundleFunc: method is nil but API.FetchCheckBundle was just called")
	}
	callInfo := struct {
		Cid apiclient.CIDType
	}{
		Cid: cid,
	}
	mock.lockFetchCheckBundle.Lock()
	mock.calls.FetchCheckBundle = append(mock.calls.FetchCheckBundle, callInfo)
	mock.lockFetchCheckBundle.Unlock()
	return mock.FetchCheckBundleFunc(cid)
}

// FetchCheckBundleCalls gets all the calls that were made to FetchCheckBundle.
// Check the length with:
//     len(mockedAPI.FetchCheckBundleCalls())
func (mock *APIMock) FetchCheckBundleCalls() []struct {
	Cid apiclient.CIDType
} {
	var calls []struct {
		Cid apiclient.CIDType
	}
	mock.lockFetchCheckBundle.RLock()
	calls = mock.calls.FetchCheckBundle
	mock.lockFetchCheckBundle.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *APIMock) Get(requrl string) ([]byte, error) {
	if mock.GetFunc == nil {
		panic("APIMock.GetFunc: method is nil but API.Get was just called")
	}
	callInfo := struct {
		Requrl string
	}{
		Requrl: requrl,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(requrl)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedAPI.GetCalls())
func (mock *APIMock) GetCalls() []struct {
	Requrl string
} {
	var calls []struct {
		Requrl string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// SearchBrokers calls SearchBrokersFunc.
func (mock *APIMock) SearchBrokers(searchCriteria *apiclient.SearchQueryType, filterCriteria *apiclient.SearchFilterType) (*[]apiclient.Broker, error) {
	if mock.SearchBrokersFunc == nil {
		panic("APIMock.SearchBrokersFunc: method is nil but API.SearchBrokers was just called")
	}
	callInfo := struct {
		SearchCriteria *apiclient.SearchQueryType
		FilterCriteria *apiclient.SearchFilterType
	}{
		SearchCriteria: searchCriteria,
		FilterCriteria: filterCriteria,
	}
	mock.lockSearchBrokers.Lock()
	mock.calls.SearchBrokers = append(mock.calls.SearchBrokers, callInfo)
	mock.lockSearchBrokers.Unlock()
	return mock.SearchBrokersFunc(searchCriteria, filterCriteria)
}

// SearchBrokersCalls gets all the calls that were made to SearchBrokers.
// Check the length with:
//     len(mockedAPI.SearchBrokersCalls())
func (mock *APIMock) SearchBrokersCalls() []struct {
	SearchCriteria *apiclient.SearchQueryType
	FilterCriteria *apiclient.SearchFilterType
} {
	var calls []struct {
		SearchCriteria *apiclient.SearchQueryType
		FilterCriteria *apiclient.SearchFilterType
	}
	mock.lockSearchBrokers.RLock()
	calls = mock.calls.SearchBrokers
	mock.lockSearchBrokers.RUnlock()
	return calls
}

// SearchCheckBundles calls SearchCheckBundlesFunc.
func (mock *APIMock) SearchCheckBundles(searchCriteria *apiclient.SearchQueryType, filterCriteria *apiclient.SearchFilterType) (*[]apiclient.CheckBundle, error) {
	if mock.SearchCheckBundlesFunc == nil {
		panic("APIMock.SearchCheckBundlesFunc: method is nil but API.SearchCheckBundles was just called")
	}
	callInfo := struct {
		SearchCriteria *apiclient.SearchQueryType
		FilterCriteria *apiclient.SearchFilterType
	}{
		SearchCriteria: searchCriteria,
		FilterCriteria: filterCriteria,
	}
	mock.lockSearchCheckBundles.Lock()
	mock.calls.SearchCheckBundles = append(mock.calls.SearchCheckBundles, callInfo)
	mock.lockSearchCheckBundles.Unlock()
	return mock.SearchCheckBundlesFunc(searchCriteria, filterCriteria)
}

// SearchCheckBundlesCalls gets all the calls that were made to SearchCheckBundles.
// Check the length with:
//     len(mockedAPI.SearchCheckBundlesCalls())
func (mock *APIMock) SearchCheckBundlesCalls() []struct {
	SearchCriteria *apiclient.SearchQueryType
	FilterCriteria *apiclient.SearchFilterType
} {
	var calls []struct {
		SearchCriteria *apiclient.SearchQueryType
		FilterCriteria *apiclient.SearchFilterType
	}
	mock.lockSearchCheckBundles.RLock()
	calls = mock.calls.SearchCheckBundles
	mock.lockSearchCheckBundles.RUnlock()
	return calls
}
